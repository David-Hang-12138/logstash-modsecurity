filter {
  if [type] == "sense_guard" {

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Align logs with Elastic ECS
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    mutate {
      # Rename to existing ECS fields
      rename => ["fqdn", "[host][hostname]"]
      rename => ["[requestHeaders][user-agent]", "[user_agent][original]"]
      rename => ["httpMethod", "[http][request][method]"]
      rename => ["requestedUri", "[url][path]"]
      rename => ["sourceIp", "[client][ip]"]
      rename => ["sourcePort", "[client][port]"]
      rename => ["program", "[service][type]"]
      rename => ["destIp", "[destination][ip]"]
      rename => ["destPort", "[destination][port]"]
      rename => ["uniqueId", "[tracing][trace][id]"]

      # Rename to custom ECS fields
      rename => ["requestHeaders", "[http][request][header]"]
      rename => ["responseHeaders", "[http][response][header]"]
      rename => ["auditLogTrailer", "[apache][sense_guard][audit_log_trailer]"]
      rename => ["rawSectionA", "[apache][sense_guard][section][a]"]
      rename => ["rawSectionB", "[apache][sense_guard][section][b]"]
      rename => ["rawSectionC", "[apache][sense_guard][section][c]"]
      rename => ["rawSectionD", "[apache][sense_guard][section][d]"]
      rename => ["rawSectionE", "[apache][sense_guard][section][e]"]
      rename => ["rawSectionF", "[apache][sense_guard][section][f]"]
      rename => ["rawSectionG", "[apache][sense_guard][section][g]"]
      rename => ["rawSectionH", "[apache][sense_guard][section][h]"]
      rename => ["rawSectionI", "[apache][sense_guard][section][i]"]
      rename => ["rawSectionJ", "[apache][sense_guard][section][j]"]
      rename => ["rawSectionK", "[apache][sense_guard][section][k]"]
      rename => ["rawSectionZ", "[apache][sense_guard][section][z]"]
      rename => ["matchedRules", "[apache][sense_guard][matched_rule][raw]"]
      rename => ["secRuleIds", "[apache][sense_guard][matched_rule][id]"]
    }

    grok {
      match => [ "incomingProtocol", "(HTTP\W)(%{NUMBER:[http][version]})" ]
    }

    grok {
      match => [ "responseStatus", "(%{NUMBER:[http][response][status_code]:long})(%{SPACE}%{DATA})?" ]
    }

    useragent { # workaround until ECS support is available: https://github.com/logstash-plugins/logstash-filter-useragent/issues/56
      source => "[user_agent][original]"
      target => "ua_tmp"

      add_field => {
        "[user_agent][device][name]" => "%{[ua_tmp][device]}"
        "[user_agent][os][name]" => "%{[ua_tmp][os][name]}"
        "[user_agent][name]" => "%{[ua_tmp][name]}"
      }
    }

    # OS version ECS compatibility
    if [ua_tmp][os][version] {
      mutate {
        add_field => {
          "[user_agent][os][version]" => "%{[ua_tmp][os][version]}"
        }
      }
    } else if [ua_tmp][os_major] {
      mutate {
        add_field => {
          "[user_agent][os][version]" => "%{[ua_tmp][os_major]}"
        }
      }

      if [ua_tmp][os_minor] {
        mutate {
          replace => {
            "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[ua_tmp][os_minor]}"
          }
        }

        if [ua_tmp][os_patch] {
          mutate {
            replace => {
              "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[ua_tmp][os_patch]}"
            }
          }

          if [ua_tmp][os_build] {
            mutate {
              replace => {
                "[user_agent][os][version]" => "%{[user_agent][os][version]}.%{[ua_tmp][os_build]}"
              }
            }
          }
        }
      }

      mutate {
        add_field => {
          "[user_agent][os][full]" => "%{[user_agent][os][name]} %{[user_agent][os][version]}"
        }
      }
    }

    # User agent version ECS compatibility
    if [ua_tmp][version] {
      mutate {
        add_field => {
          "[user_agent][version]" => "%{[ua_tmp][version]}"
        }
      }
    }
    else if [ua_tmp][major] {
      mutate {
        add_field => {
          "[user_agent][version]" => "%{[ua_tmp][major]}"
        }
      }

      if [ua_tmp][minor] {
        mutate {
          replace => {
            "[user_agent][version]" => "%{[user_agent][version]}.%{[ua_tmp][minor]}"
          }
        }

        if [ua_tmp][patch] {
          mutate {
            replace => {
              "[user_agent][version]" => "%{[user_agent][version]}.%{[ua_tmp][patch]}"
            }
          }

          if [ua_tmp][build] {
            mutate {
              replace => {
                "[user_agent][version]" => "%{[user_agent][version]}.%{[ua_tmp][build]}"
              }
            }
          }
        }
      }
    }

    mutate {
      remove_field => ["ua_tmp", "log"]
    }

    geoip {
      source => "[client][ip]"
      target => "[client][geo]"
      database => "/etc/logstash/GeoLite2-City.mmdb"
    }
#    geoip {
#      source => "[client][ip]"
#      target => "[client][as]"
#      database => "/var/lib/GeoIP/GeoLite2-ASN.mmdb"
#    }
  }
}
